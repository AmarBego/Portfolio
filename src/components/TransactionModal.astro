<div id="transactions-modal" class="modal" data-user-id="">
    <div class="modal-content">
        <h2 id="modal-title"></h2>
        <div id="transactions-list"></div>
        <button id="close-modal">Close</button>
    </div>
</div>

<script>
    import { formatDate } from '../utils/dateUtils';

    interface Transaction {
        _id: string;
        category?: string;
        amount: number;
        date: string | Date;
        isPaid: boolean;
        dueDate?: string | Date;
    }

    declare global {
        interface Window {
            removeTransactionFromModal: (transactionId: string) => void;
            addTransactionToModal: (transaction: Transaction) => void;
            updateTransactions: (transactions: Transaction[], userId: string) => void;
        }
    }

    interface UpdateTransactionsEvent extends CustomEvent {
        detail: {
            transactions: Transaction[];
            userId: string;
        };
    }

    document.addEventListener('DOMContentLoaded', () => {
        const modal = document.getElementById('transactions-modal') as HTMLElement;
        const transactionsList = document.getElementById('transactions-list') as HTMLElement;

        window.addTransactionToModal = (transaction: Transaction) => {
            const noTransactionsMessage = transactionsList.querySelector('.no-transactions');
            if (noTransactionsMessage) {
                noTransactionsMessage.remove();
            }

            const existingTransaction = transactionsList.querySelector(`[data-transaction-id="${transaction._id}"]`);
            if (existingTransaction) {
                existingTransaction.innerHTML = createTransactionHTML(transaction);
            } else {
                const transactionItem = document.createElement('div');
                transactionItem.className = 'transaction-item';
                transactionItem.dataset.transactionId = transaction._id;
                transactionItem.innerHTML = createTransactionHTML(transaction);
                transactionsList.insertBefore(transactionItem, transactionsList.firstChild);
            }
        };

        window.removeTransactionFromModal = (transactionId: string) => {
            const transactionElement = transactionsList.querySelector(`[data-transaction-id="${transactionId}"]`);
            if (transactionElement) {
                transactionElement.remove();
            }

            if (transactionsList.children.length === 0) {
                addNoTransactionsMessage();
            }
        };

        function createTransactionHTML(transaction: Transaction): string {
            const isDueTransaction = transaction.isPaid === false;
            
            return `
                <p><strong>Description:</strong> ${transaction.category || 'N/A'}</p>
                <p><strong>Amount:</strong> $${transaction.amount.toFixed(2)}</p>
                <p><strong>Date:</strong> ${formatDate(transaction.date)}</p>
                ${isDueTransaction && transaction.dueDate ? `<p><strong>Due Date:</strong> ${formatDate(transaction.dueDate)}</p>` : ''}
            `;
        }

        function addNoTransactionsMessage(): void {
            const noTransactionsMessage = document.createElement('p');
            noTransactionsMessage.className = 'no-transactions';
            noTransactionsMessage.textContent = 'No transactions found.';
            transactionsList.appendChild(noTransactionsMessage);
        }
        
        document.addEventListener('updateTransactions', ((event: UpdateTransactionsEvent) => {
            const { transactions, userId } = event.detail;
            if (modal.dataset.userId === userId && modal.style.display === 'block') {
                transactionsList.innerHTML = '';
                if (transactions.length === 0) {
                    addNoTransactionsMessage();
                } else {
                    transactions.forEach(transaction => {
                        window.addTransactionToModal(transaction);
                    });
                }
            }
        }) as EventListener);
    });
</script>


<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        overflow: auto;
    }

    .modal-content {
        background-color: var(--background);
        margin: 10vh auto;
        padding: 2rem;
        border-radius: 16px;
        width: 90%;
        max-width: 400px;
        max-height: 80vh;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }
    #transactions-modal {
    background-color: rgba(0, 0, 0, 0.8);
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}
:global(.transaction-item) {
        background-color: #2a2a2a;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
    }

    :global(.transaction-item p) {
        margin: 5px 0;
        color: #ffffff;
    }

    :global(.transaction-item p strong) {
        color: #a7a9be;
    }

    :global(.no-transactions) {
        text-align: center;
        color: #a7a9be;
        font-style: italic;
    }

    #transactions-list {
        max-height: calc(62vh - 80px);
        overflow-y: auto;
        padding: 10px;
    }

#modal-title {
    text-align: center;
    color: #ffffff;
    margin-bottom: 20px;
}
#close-modal {
    background-color: #ff8906;
    color: #ffffff;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    display: block;
    margin: 20px auto 0;
}

#close-modal:hover {
    background-color: #e67e00;
}
</style>