---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('blog');
const featuredPost = allPosts[0]; // Assuming the first post is featured
const otherPosts = allPosts.slice(1);

// Get unique categories
const categories = [...new Set(allPosts.flatMap(post => post.data.categories || []))];
---

<Layout title="Blog | Amar Begovic">
    <main class="blog-container">
        <h1 class="blog-title">Insights & Experiences</h1>
        
        <div class="category-filter">
            <button class="filter-btn active" data-category="all">All</button>
            {categories.map(category => (
                <button class="filter-btn" data-category={category}>{category}</button>
            ))}
        </div>

        <div class="blog-grid" id="blogGrid">
            {otherPosts.map((post) => (
                <article class="blog-card" data-categories={post.data.categories?.join(' ')}>
                    <div class="card-content">
                        <span class="date">{new Date(post.data.pubDate).toLocaleDateString()}</span>
                        <h3>{post.data.title}</h3>
                        <p>{post.data.description}</p>
                    </div>
                    <a href={`/blog/${post.slug}`} class="read-more">Read More</a>
                </article>
            ))}
        </div>
    </main>
</Layout>

<style>
    .blog-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 4rem 2rem;
    }

    .blog-title {
        font-size: var(--font-size-xxl);
        text-align: center;
        margin-bottom: 3rem;
        color: var(--headline);
    }


    .category-filter {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .filter-btn {
        background: transparent;
        border: 1px solid var(--button);
        color: var(--button);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .filter-btn.active, .filter-btn:hover {
        background: var(--button);
        color: var(--button-text);
    }

    .blog-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
    }

    .blog-card {
        background: var(--stroke);
        border-radius: 10px;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .blog-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .card-content {
        padding: 1.5rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .card-content h3 {
        margin-top: 0.5rem;
        margin-bottom: 1rem;
    }

    .card-content p {
        flex-grow: 1;
    }

    .date {
        color: var(--highlight);
        font-size: 0.9rem;
    }

    .read-more {
        display: block;
        padding: 0.75rem 1.5rem;
        background-color: var(--button);
        color: var(--button-text);
        text-decoration: none;
        font-weight: bold;
        text-align: center;
        transition: background-color 0.3s ease;
        margin-top: auto;
    }

    .read-more:hover {
        background-color: var(--highlight);
    }


    @media (max-width: 768px) {
        .featured-post {
            flex-direction: column;
        }

        .featured-image {
            height: 200px;
        }
    }
</style>

<script>
    function setupBlog() {
        const grid = document.querySelector('.blog-grid');
        const filterBtns = document.querySelectorAll('.filter-btn');
        const cards = document.querySelectorAll('.blog-card');

        filterBtns.forEach(btn => {
    (btn as HTMLElement).addEventListener('click', () => {
        const category = (btn as HTMLElement).dataset.category;
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');

        cards.forEach(card => {
    if (category === 'all' || (card as HTMLElement).dataset.categories?.includes(category ?? '')) {
        (card as HTMLElement).style.display = 'flex';
    } else {
        (card as HTMLElement).style.display = 'none';
    }
});
            });
        });
    }

    document.addEventListener('DOMContentLoaded', setupBlog);
</script>